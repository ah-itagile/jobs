apply from: 'gradle/libraries.gradle'

allprojects {
    apply plugin: 'idea'
    version = '0.7.3-SNAPSHOT'
    // version = '0.7.3'
    group = 'de.otto'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    test {
        useTestNG()
    }

    repositories {
        maven { url 'http://nexus.lhotse.ov.otto.de:8080/content/groups/public' }
    }

    configurations {
        archives
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    uploadArchives {
        configuration = configurations.archives
        repositories {
            mavenDeployer {
                repository(url: "http://nexus.lhotse.ov.otto.de:8080/content/repositories/releases") {
                    authentication(userName: "lhotse_release", password: "lhotse_release123")
                }
                snapshotRepository(url: "http://nexus.lhotse.ov.otto.de:8080/content/repositories/snapshots") {
                    authentication(userName: "lhotse_snapshot", password: "lhotse_snapshot123")
                }
            }
        }
    }

    ext.cobSerFile="${project.buildDir}/cobertura.ser"
    ext.classesDir="${sourceSets.main.output.classesDir}"
    ext.copyOfClassesDir="${classesDir}-not-instrumented"

    task cobertura (type: Test) {

        jvmArgs '-XX:-UseSplitVerifier'

        useTestNG()
        systemProperties ["net.sourceforge.cobertura.datafile"] = cobSerFile

        doFirst {
            if (new File(classesDir).exists()) {
                logger.quiet "instrumenting classes for cobertura"
                ant {
                    // delete data file for cobertura, otherwise coverage would be added
                    delete(file:cobSerFile, failonerror:false)
                    // delete copy of original classes
                    delete(dir: copyOfClassesDir, failonerror:false)
                    // import cobertura task, so it is available in the script
                    taskdef(resource:'tasks.properties', classpath: configurations.testRuntime.asPath)
                    // create copy (backup) of original class files
                    copy(todir: copyOfClassesDir) {
                        fileset(dir: classesDir)
                    }
                    // instrument the relevant classes in-place
                    'cobertura-instrument'(datafile:cobSerFile) {
                        fileset(dir: classesDir,
                                //includes:"my/classes/**/*.class",
                                includes: "**/*.class",
                                excludes: "**/*Test.class")
                    }
                }
            }
        }

        doLast {
            logger.quiet "tidying up and generating cobertura report"
            if (new File(copyOfClassesDir).exists()) {
                // replace instrumented classes with backup copy again
                ant {
                    delete(file: classesDir)
                    move(file: copyOfClassesDir,
                            tofile: classesDir)
                }
                // create cobertura reports
                ant.'cobertura-report'(destdir:"${project.buildDir}/reports/cobertura",
                        format:'xml', srcdir:"src/main/java", datafile:cobSerFile)
                ant.'cobertura-report'(destdir:"${project.buildDir}/reports/cobertura",
                        format:'html', srcdir:"src/main/java", datafile:cobSerFile)
            }
        }
    }

}

